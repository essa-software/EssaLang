func main() {
    let code = input();
    let code_size = str_size(code);

    mut memory: [30000]u32 = [];

    mut ip = 0;
    mut ptr = 0;

    while (ip < code_size) {
        let opcode = code[ip];

        if (opcode == '+') {
            memory[ptr] += 1;
        } else if (opcode == '-') {
            memory[ptr] -= 1;
        } else if (opcode == '<') {
            if (ptr == 0) {
                ptr = 29999;
            } else {
                ptr -= 1;
            }
        } else if (opcode == '>') {
            ptr += 1;
            if (ptr >= 30000) {
                ptr = 0;
            }
        } else if (opcode == '.') {
            print("{} ", memory[ptr]);
        } else if (opcode == ',') {
            // TODO
        } else if (opcode == '[') {
            if (memory[ptr] == 0) {
                mut i = ip;
                mut depth = 1;
                while (i < code_size - 1) {
                    i += 1;
                    if (code[i] == '[') {
                        depth += 1;
                    }
                    else if (code[i] == ']') {
                        depth -= 1;
                        if (depth == 0) {
                            break;
                        }
                    }
                }
                ip = i + 1;
            }
        } else if (opcode == ']') {
            if (memory[ptr] != 0) {
                mut i = ip;
                mut depth = 1;
                while (i > 0) {
                    i -= 1;
                    if (code[i] == ']') {
                        depth += 1;
                    }
                    else if (code[i] == '[') {
                        depth -= 1;
                        if (depth == 0) {
                            break;
                        }
                    }
                }
                ip = i;
            }
        } else {
            // Ignore all the other cases. Maybe needs explicit keyword but not necessarily (e.g Python uses "pass")
        }
        ip += 1; // This also may overflow.
    }
}
